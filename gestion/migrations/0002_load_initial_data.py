# Generated by Django 5.0.6 on 2024-05-22 16:00

from django.db import migrations


def load_initial_data(apps, schema_editor):
    """
    Carga los datos iniciales para los modelos catálogo del proyecto.
    """
    # Obtenemos los modelos de la versión histórica de la app 'gestion'
    # para asegurar la compatibilidad con la migración.
    Impacto = apps.get_model('gestion', 'Impacto')
    Interfaz = apps.get_model('gestion', 'Interfaz')
    GrupoResolutor = apps.get_model('gestion', 'GrupoResolutor')
    Cluster = apps.get_model('gestion', 'Cluster')
    Bloque = apps.get_model('gestion', 'Bloque')
    Criticidad = apps.get_model('gestion', 'Criticidad')
    Severidad = apps.get_model('gestion', 'Severidad')
    Estado = apps.get_model('gestion', 'Estado')

    # --- Datos a Cargar ---

    impacto_data = [
        (1, 'interno'), (2, 'externo'), (3, 'sin definir'),
    ]
    for pk, desc in impacto_data:
        Impacto.objects.update_or_create(
            id=pk, defaults={'desc_impacto': desc})

    interfaz_data = [
        (1, 'No definida'), (2, 'WEB'), (3, 'Tabla'), (4, 'Sin servicio'),
        (5, 'Sin despliegue de información'), (6,
                                               'Sin activación'), (7, 'Sin acceso'),
        (8, 'SERVIDOR'), (9, 'Reporte'), (10, 'PRODUCTOS PS'), (11, 'Proceso'),
        (12, 'Portabilidad'), (13, 'Peticiones sin aplicar'),
        (14, 'Normalización y factibilidad técnica multiservicio'), (15, 'Infraestructura'),
        (16, 'Indisponibilidad PMS'), (17, 'Inconsistencia de datos'), (18, 'FTP'),
        (19, 'Frontend'), (20, 'Cuenta'), (21,
                                           'Contención'), (22, 'Consumo de CPU'),
        (23, 'Cancelación de proceso'), (24, 'Base de datos'), (25, 'BACKEND'),
        (26, 'Archivo'), (27, 'Aplicativo'), (28, 'Agenda WEB'),
    ]
    for pk, desc in interfaz_data:
        Interfaz.objects.update_or_create(
            id=pk, defaults={'desc_interfaz': desc})

    grupo_resolutor_data = [
        (1, 'grupo_generico'), (2, 'Everis N2'), (3, 'HP-SPN'), (4, 'ACC N2'),
        (5, 'AMDOCS N2'), (6, 'INDRA N2'), (7, 'Soporte DWH G11'),
        (8, 'SOPORTE DWH MOVIL'), (9, 'Soporte Génesis G1'), (10, 'SWF_INDRA_G1'),
        (11, 'SWF_INDRA_G11'), (12, 'SWF_INDRA_G3'), (13, 'SWF_INDRA_G5'),
        (14, 'SWF_INDRA_3B'),
    ]
    for pk, desc in grupo_resolutor_data:
        GrupoResolutor.objects.update_or_create(
            id=pk, defaults={'desc_grupo_resol': desc})

    cluster_data = [
        (1, 'Datos'), (2, 'SW'), (3, 'Reproceso'), (4, 'Apoyo Infraestructura'),
        (5, 'Apoyo Configuración'), (6, 'Apoyo Usuario'), (7,
                                                           'Apoyo Procedimiento Comercial'),
        (8, 'Apoyo Control-M'), (9, 'Apoyo Contenida en IT'),
        (10, 'Apoyo Proveedor sin Soporte TI'), (11, 'Apoyo (Otra Casuística)'),
        (12, 'Apoyo No Replica en Producción'), (13, 'Sin Cluster'),
    ]
    for pk, desc in cluster_data:
        Cluster.objects.update_or_create(
            id=pk, defaults={'desc_cluster': desc})

    bloque_data = [
        (1, 'BLOQUE 1'), (2, 'BLOQUE 2'), (3,
                                           'BLOQUE 3'), (4, 'BLOQUE 4'), (5, 'Sin bloque'),
    ]
    for pk, desc in bloque_data:
        Bloque.objects.update_or_create(id=pk, defaults={'desc_bloque': desc})

    criticidad_data = [
        (1, 'critica'), (2, 'no critica'), (3, 'sin criticidad'),
    ]
    for pk, desc in criticidad_data:
        Criticidad.objects.update_or_create(
            id=pk, defaults={'desc_criticidad': desc})

    severidad_data = [
        (1, 'critica'), (2, 'alta'), (3, 'media'), (4, 'baja'), (5, 'sin prioridad'),
    ]
    for pk, desc in severidad_data:
        Severidad.objects.update_or_create(
            id=pk, defaults={'desc_severidad': desc})

    estado_data = [
        (1, 'Construccion'), (2, 'Produccion'), (3, 'Deshuso'), (4, 'Pendiente'),
        (5, 'Resuelto'), (6, 'Cerrado'),
    ]
    for pk, desc in estado_data:
        Estado.objects.update_or_create(id=pk, defaults={'desc_estado': desc})


def unload_initial_data(apps, schema_editor):
    """
    Elimina los datos cargados por esta migración.
    """
    apps.get_model('gestion', 'Impacto').objects.all().delete()
    apps.get_model('gestion', 'Interfaz').objects.all().delete()
    apps.get_model('gestion', 'GrupoResolutor').objects.all().delete()
    apps.get_model('gestion', 'Cluster').objects.all().delete()
    apps.get_model('gestion', 'Bloque').objects.all().delete()
    apps.get_model('gestion', 'Criticidad').objects.all().delete()
    apps.get_model('gestion', 'Severidad').objects.all().delete()
    apps.get_model('gestion', 'Estado').objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('gestion', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            load_initial_data, reverse_code=unload_initial_data),
    ]
